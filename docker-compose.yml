name: "service-boilerplate"

services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      AUTH_PUBLIC_JWK_URI: https://sso.goida.dev/realms/minin/protocol/openid-connect/certs
      AUTH_CLIENT_ID: minin-client
      POSTGRES_DB_NAME: postgres
      POSTGRES_DB_USER: minin
      POSTGRES_DB_PASS: minin
      POSTGRES_DB_HOST: backend-database
      POSTGRES_DB_PORT: 5432
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-app.rule=Host(`api.goida.dev`)"
      - "traefik.http.routers.api-app.entrypoints=websecure"
      - "traefik.http.routers.api-app.tls=true"
      - "traefik.http.routers.api-app.tls.certresolver=leresolver"
      - "traefik.http.routers.api-app.service=api-app"
      - "traefik.http.services.api-app.loadbalancer.server.port=8080"
    networks:
      - traefik
    restart: unless-stopped
    depends_on:
      - redis
      - migrations
      - backend-database

  redis:
    image: redis:latest
    restart: unless-stopped
    networks:
      - traefik

  backend-database:
    container_name: "backend-database"
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: minin
      POSTGRES_PASSWORD: minin
    volumes:
      - data:/var/lib/postgresql/data
    networks:
      - traefik
    restart: unless-stopped

  migrations:
    image: migrate/migrate
    entrypoint: [
      "migrate",
      "-database", "postgres://minin:minin@backend-database:5432/postgres?sslmode=disable",
      "-path", "/migrations",
      "up"
    ]
    volumes:
      - ./migrations:/migrations
    networks:
      - traefik
    depends_on:
      - backend-database
    restart: on-failure



volumes:
  data:


networks:
  traefik:
    external: true
